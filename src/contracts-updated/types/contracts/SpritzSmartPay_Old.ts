/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace SpritzSmartPay_Old {
  export type SubscriptionStruct = {
    cadence: PromiseOrValue<BigNumberish>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    paymentCount: PromiseOrValue<BigNumberish>;
    totalPayments: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    lastPaymentTimestamp: PromiseOrValue<BigNumberish>;
    paymentReference: PromiseOrValue<BytesLike>;
  };

  export type SubscriptionStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    cadence: number;
    paymentAmount: number;
    paymentCount: BigNumber;
    totalPayments: BigNumber;
    owner: string;
    paymentToken: string;
    startTime: BigNumber;
    lastPaymentTimestamp: BigNumber;
    paymentReference: string;
  };
}

export interface SpritzSmartPay_OldInterface extends utils.Interface {
  functions: {
    "canChargeSubscription(bytes32)": FunctionFragment;
    "createSubscription(uint32,uint128,address,uint256,bytes32,uint8)": FunctionFragment;
    "deactivateSubscription(bytes32)": FunctionFragment;
    "getActiveUsers()": FunctionFragment;
    "getSubscription(bytes32)": FunctionFragment;
    "getUserSubscriptionCount(address)": FunctionFragment;
    "getUserSubscriptions(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "processPayment(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subscriptionNonce(address)": FunctionFragment;
    "subscriptions(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canChargeSubscription"
      | "createSubscription"
      | "deactivateSubscription"
      | "getActiveUsers"
      | "getSubscription"
      | "getUserSubscriptionCount"
      | "getUserSubscriptions"
      | "owner"
      | "pause"
      | "paused"
      | "processPayment"
      | "renounceOwnership"
      | "subscriptionNonce"
      | "subscriptions"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canChargeSubscription",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateSubscription",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptionCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processPayment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "canChargeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SubscriptionCreated(address,bytes32)": EventFragment;
    "SubscriptionDeactivated(address,bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserActivated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserActivated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SubscriptionCreatedEventObject {
  user: string;
  subscriptionId: string;
}
export type SubscriptionCreatedEvent = TypedEvent<
  [string, string],
  SubscriptionCreatedEventObject
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export interface SubscriptionDeactivatedEventObject {
  user: string;
  subscriptionId: string;
}
export type SubscriptionDeactivatedEvent = TypedEvent<
  [string, string],
  SubscriptionDeactivatedEventObject
>;

export type SubscriptionDeactivatedEventFilter =
  TypedEventFilter<SubscriptionDeactivatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UserActivatedEventObject {
  user: string;
}
export type UserActivatedEvent = TypedEvent<[string], UserActivatedEventObject>;

export type UserActivatedEventFilter = TypedEventFilter<UserActivatedEvent>;

export interface SpritzSmartPay_Old extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpritzSmartPay_OldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canChargeSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createSubscription(
      paymentAmount: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveUsers(overrides?: CallOverrides): Promise<[string[]]>;

    getSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[SpritzSmartPay_Old.SubscriptionStructOutput]>;

    getUserSubscriptionCount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserSubscriptions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processPayment(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
      ] & {
        cadence: number;
        paymentAmount: number;
        paymentCount: BigNumber;
        totalPayments: BigNumber;
        owner: string;
        paymentToken: string;
        startTime: BigNumber;
        lastPaymentTimestamp: BigNumber;
        paymentReference: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canChargeSubscription(
    subscriptionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createSubscription(
    paymentAmount: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateSubscription(
    subscriptionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveUsers(overrides?: CallOverrides): Promise<string[]>;

  getSubscription(
    subscriptionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<SpritzSmartPay_Old.SubscriptionStructOutput>;

  getUserSubscriptionCount(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserSubscriptions(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processPayment(
    subscriptionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subscriptions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string
    ] & {
      cadence: number;
      paymentAmount: number;
      paymentCount: BigNumber;
      totalPayments: BigNumber;
      owner: string;
      paymentToken: string;
      startTime: BigNumber;
      lastPaymentTimestamp: BigNumber;
      paymentReference: string;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canChargeSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createSubscription(
      paymentAmount: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveUsers(overrides?: CallOverrides): Promise<string[]>;

    getSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<SpritzSmartPay_Old.SubscriptionStructOutput>;

    getUserSubscriptionCount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscriptions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processPayment(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subscriptionNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
      ] & {
        cadence: number;
        paymentAmount: number;
        paymentCount: BigNumber;
        totalPayments: BigNumber;
        owner: string;
        paymentToken: string;
        startTime: BigNumber;
        lastPaymentTimestamp: BigNumber;
        paymentReference: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SubscriptionCreated(address,bytes32)"(
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionCreatedEventFilter;

    "SubscriptionDeactivated(address,bytes32)"(
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionDeactivatedEventFilter;
    SubscriptionDeactivated(
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionDeactivatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserActivated(address)"(
      user?: PromiseOrValue<string> | null
    ): UserActivatedEventFilter;
    UserActivated(
      user?: PromiseOrValue<string> | null
    ): UserActivatedEventFilter;
  };

  estimateGas: {
    canChargeSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSubscription(
      paymentAmount: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscriptionCount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscriptions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processPayment(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canChargeSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSubscription(
      paymentAmount: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscriptionCount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscriptions(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processPayment(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
