/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace SpritzSmartPay {
  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };

  export type SwapParamsStruct = {
    sourceTokenAmountMax: PromiseOrValue<BigNumberish>;
    paymentTokenAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    swapData: PromiseOrValue<BytesLike>;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    sourceTokenAmountMax: BigNumber;
    paymentTokenAmount: BigNumber;
    deadline: BigNumber;
    swapData: string;
  };
}

export interface SpritzSmartPayInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAYMENT_PROCESSOR_ROLE()": FunctionFragment;
    "SUBSCRIPTION_TYPEHASH()": FunctionFragment;
    "createSubscription(address,uint256,uint256,uint256,bytes32,uint8,uint8)": FunctionFragment;
    "createSubscriptionBySignature(address,address,uint256,uint256,uint256,bytes32,uint8,uint8,(uint8,bytes32,bytes32))": FunctionFragment;
    "deleteSubscription(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantPaymentProcessor(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hashSubscription(address,address,uint256,uint256,uint256,bytes32,uint8,uint8)": FunctionFragment;
    "processSwapPayment(address,address,uint256,uint256,uint256,bytes32,uint8,uint8,(uint256,uint256,uint256,bytes))": FunctionFragment;
    "processTokenPayment(address,uint256,address,uint256,uint256,uint256,bytes32,uint8,uint8)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokePaymentProcessor(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "subscriptions(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PAYMENT_PROCESSOR_ROLE"
      | "SUBSCRIPTION_TYPEHASH"
      | "createSubscription"
      | "createSubscriptionBySignature"
      | "deleteSubscription"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantPaymentProcessor"
      | "grantRole"
      | "hasRole"
      | "hashSubscription"
      | "processSwapPayment"
      | "processTokenPayment"
      | "renounceRole"
      | "revokePaymentProcessor"
      | "revokeRole"
      | "subscriptions"
      | "supportsInterface"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_PROCESSOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscriptionBySignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SpritzSmartPay.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSubscription",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPaymentProcessor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processSwapPayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SpritzSmartPay.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processTokenPayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePaymentProcessor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_PROCESSOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscriptionBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPaymentProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processSwapPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processTokenPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePaymentProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "PaymentProcessed(address,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubscriptionCreated(address,bytes32,address,uint256,uint256,uint256,bytes32,uint8,uint8)": EventFragment;
    "SubscriptionDeleted(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionDeleted"): EventFragment;
}

export interface PaymentProcessedEventObject {
  subscriber: string;
  subscriptionId: string;
}
export type PaymentProcessedEvent = TypedEvent<
  [string, string],
  PaymentProcessedEventObject
>;

export type PaymentProcessedEventFilter =
  TypedEventFilter<PaymentProcessedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SubscriptionCreatedEventObject {
  subscriber: string;
  subscriptionId: string;
  paymentToken: string;
  paymentAmountMax: BigNumber;
  startTime: BigNumber;
  totalPayments: BigNumber;
  paymentReference: string;
  cadence: number;
  subscriptionType: number;
}
export type SubscriptionCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number
  ],
  SubscriptionCreatedEventObject
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export interface SubscriptionDeletedEventObject {
  subscriptionId: string;
}
export type SubscriptionDeletedEvent = TypedEvent<
  [string],
  SubscriptionDeletedEventObject
>;

export type SubscriptionDeletedEventFilter =
  TypedEventFilter<SubscriptionDeletedEvent>;

export interface SpritzSmartPay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpritzSmartPayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAYMENT_PROCESSOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUBSCRIPTION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    createSubscription(
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSubscriptionBySignature(
      _subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      signature: SpritzSmartPay.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantPaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashSubscription(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processSwapPayment(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      swapParams: SpritzSmartPay.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processTokenPayment(
      subscriber: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        paymentCount: BigNumber;
        startTime: BigNumber;
        lastPaymentTimestamp: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAYMENT_PROCESSOR_ROLE(overrides?: CallOverrides): Promise<string>;

  SUBSCRIPTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  createSubscription(
    paymentToken: PromiseOrValue<string>,
    paymentAmountMax: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    subscriptionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSubscriptionBySignature(
    _subscriber: PromiseOrValue<string>,
    paymentToken: PromiseOrValue<string>,
    paymentAmountMax: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    subscriptionType: PromiseOrValue<BigNumberish>,
    signature: SpritzSmartPay.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteSubscription(
    subscriptionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantPaymentProcessor(
    processor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashSubscription(
    subscriber: PromiseOrValue<string>,
    paymentToken: PromiseOrValue<string>,
    paymentAmount: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    subscriptionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  processSwapPayment(
    subscriber: PromiseOrValue<string>,
    paymentToken: PromiseOrValue<string>,
    paymentAmount: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    subscriptionType: PromiseOrValue<BigNumberish>,
    swapParams: SpritzSmartPay.SwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processTokenPayment(
    subscriber: PromiseOrValue<string>,
    paymentAmount: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    paymentAmountMax: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    totalPayments: PromiseOrValue<BigNumberish>,
    paymentReference: PromiseOrValue<BytesLike>,
    cadence: PromiseOrValue<BigNumberish>,
    subscriptionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePaymentProcessor(
    processor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      paymentCount: BigNumber;
      startTime: BigNumber;
      lastPaymentTimestamp: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAYMENT_PROCESSOR_ROLE(overrides?: CallOverrides): Promise<string>;

    SUBSCRIPTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    createSubscription(
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubscriptionBySignature(
      _subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      signature: SpritzSmartPay.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashSubscription(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    processSwapPayment(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      swapParams: SpritzSmartPay.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    processTokenPayment(
      subscriber: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        paymentCount: BigNumber;
        startTime: BigNumber;
        lastPaymentTimestamp: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PaymentProcessed(address,bytes32)"(
      subscriber?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): PaymentProcessedEventFilter;
    PaymentProcessed(
      subscriber?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): PaymentProcessedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SubscriptionCreated(address,bytes32,address,uint256,uint256,uint256,bytes32,uint8,uint8)"(
      subscriber?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      paymentToken?: PromiseOrValue<string> | null,
      paymentAmountMax?: null,
      startTime?: null,
      totalPayments?: null,
      paymentReference?: null,
      cadence?: null,
      subscriptionType?: null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      subscriber?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      paymentToken?: PromiseOrValue<string> | null,
      paymentAmountMax?: null,
      startTime?: null,
      totalPayments?: null,
      paymentReference?: null,
      cadence?: null,
      subscriptionType?: null
    ): SubscriptionCreatedEventFilter;

    "SubscriptionDeleted(bytes32)"(
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionDeletedEventFilter;
    SubscriptionDeleted(
      subscriptionId?: PromiseOrValue<BytesLike> | null
    ): SubscriptionDeletedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_PROCESSOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    createSubscription(
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSubscriptionBySignature(
      _subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      signature: SpritzSmartPay.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashSubscription(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processSwapPayment(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      swapParams: SpritzSmartPay.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processTokenPayment(
      subscriber: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_PROCESSOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCRIPTION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSubscription(
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSubscriptionBySignature(
      _subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      signature: SpritzSmartPay.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteSubscription(
      subscriptionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashSubscription(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processSwapPayment(
      subscriber: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      swapParams: SpritzSmartPay.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processTokenPayment(
      subscriber: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      paymentAmountMax: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      totalPayments: PromiseOrValue<BigNumberish>,
      paymentReference: PromiseOrValue<BytesLike>,
      cadence: PromiseOrValue<BigNumberish>,
      subscriptionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePaymentProcessor(
      processor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
