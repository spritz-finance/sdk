/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../common";
import type {
  UniswapV3Module,
  UniswapV3ModuleInterface,
} from "../../../../contracts/swapModules/UniSwapV3Module.sol/UniswapV3Module";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapTarget",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedRefund",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNativeSwap",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "swapData",
        type: "bytes",
      },
    ],
    name: "decodeSwapData",
    outputs: [
      {
        internalType: "address",
        name: "inputTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "inputTokenAmountMax",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapData",
            type: "bytes",
          },
        ],
        internalType: "struct SwapModule.ExactOutputParams",
        name: "swapParams",
        type: "tuple",
      },
    ],
    name: "exactOutputNativeSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "inputTokenAmountMax",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapData",
            type: "bytes",
          },
        ],
        internalType: "struct SwapModule.ExactOutputParams",
        name: "swapParams",
        type: "tuple",
      },
    ],
    name: "exactOutputSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapTarget",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161114538038061114583398101604081905261002f91610069565b6001600160601b0319606092831b811660a052911b1660805261009c565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007c57600080fd5b6100858361004d565b91506100936020840161004d565b90509250929050565b60805160601c60a05160601c6110486100fd6000396000818160e301528181610455015281816104f60152818161053d015281816105720152610838015260008181609701528181610169015281816101f5015261029301526110486000f3fe60806040526004361061005a5760003560e01c80637e7f0cde116100435780637e7f0cde146100d1578063cde99e6314610105578063cf0e81601461014557600080fd5b80632f2a12711461005f5780633fc8cef314610085575b600080fd5b61007261006d366004610e5e565b610165565b6040519081526020015b60405180910390f35b34801561009157600080fd5b506100b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007c565b3480156100dd57600080fd5b506100b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561011157600080fd5b50610125610120366004610dec565b61039f565b604080516001600160a01b0393841681529290911660208301520161007c565b34801561015157600080fd5b50610072610160366004610e5e565b6103b8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083604001356040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101c657600080fd5b505af11580156101da573d6000803e3d6000fd5b505050505060008060006101ed8561041e565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461025e576040517fee52bf1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610397576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156102df57600080fd5b505af11580156102f3573d6000803e3d6000fd5b506000925061030b9150506040870160208801610da1565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610355576040519150601f19603f3d011682016040523d82523d6000602084013e61035a565b606091505b5050905080610395576040517feba0f38900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b509392505050565b6000806103ac84846105ae565b915091505b9250929050565b6000806000806103c78561041e565b9250925092506000811180156103f55750306103e96040870160208801610da1565b6001600160a01b031614155b156103975761039761040d6040870160208801610da1565b6001600160a01b038516908361063a565b6000808061043761043260a0860186610f66565b6105ae565b50604051636eb1769f60e11b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015291945084916000919083169063dd62ed3e9060440160206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190610e99565b9050806105225761051d6001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000006000196106e8565b610599565b8560400135811015610599576105636001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000060006106e8565b6105996001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000006000196106e8565b6105a286610831565b95979096509350505050565b6000806105f084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061098292505050565b915061063184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f392505050565b90509250929050565b6040516001600160a01b0383166024820152604481018290526106e39084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a52565b505050565b8015806107715750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610e99565b155b6107e85760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b6040516001600160a01b0383166024820152604481018290526106e39084907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161067f565b60008060007f0000000000000000000000000000000000000000000000000000000000000000905060006040518060a00160405280868060a001906108769190610f66565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020908101906108bf90880188610da1565b6001600160a01b03168152602001866080013581526020018660600135815260200186604001358152509050816001600160a01b031663f28c0498826040518263ffffffff1660e01b81526004016109179190610f0d565b602060405180830381600087803b15801561093157600080fd5b505af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190610e99565b9350610979846040870135610fc5565b92505050915091565b60006014825110156109d65760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206279746573206c656e67746800000000000000000000000060448201526064016107df565b6109ed82601484516109e89190610fc5565b610b37565b92915050565b6000601482511015610a475760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206279746573206c656e67746800000000000000000000000060448201526064016107df565b6109ed826000610b37565b6000610aa7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c079092919063ffffffff16565b8051909150156106e35780806020019051810190610ac59190610dca565b6106e35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107df565b600081610b45816014610fad565b1015610b935760405162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f77000000000000000000000000000060448201526064016107df565b610b9e826014610fad565b83511015610bee5760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064016107df565b5001602001516c01000000000000000000000000900490565b6060610c168484600085610c20565b90505b9392505050565b606082471015610c985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107df565b6001600160a01b0385163b610cef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107df565b600080866001600160a01b03168587604051610d0b9190610ede565b60006040518083038185875af1925050503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b5091509150610d5d828286610d68565b979650505050505050565b60608315610d77575081610c19565b825115610d875782518084602001fd5b8160405162461bcd60e51b81526004016107df9190610efa565b600060208284031215610db357600080fd5b81356001600160a01b0381168114610c1957600080fd5b600060208284031215610ddc57600080fd5b81518015158114610c1957600080fd5b60008060208385031215610dff57600080fd5b823567ffffffffffffffff80821115610e1757600080fd5b818501915085601f830112610e2b57600080fd5b813581811115610e3a57600080fd5b866020828501011115610e4c57600080fd5b60209290920196919550909350505050565b600060208284031215610e7057600080fd5b813567ffffffffffffffff811115610e8757600080fd5b820160c08185031215610c1957600080fd5b600060208284031215610eab57600080fd5b5051919050565b60008151808452610eca816020860160208601610fdc565b601f01601f19169290920160200192915050565b60008251610ef0818460208701610fdc565b9190910192915050565b602081526000610c196020830184610eb2565b602081526000825160a06020840152610f2960c0840182610eb2565b90506001600160a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b6000808335601e19843603018112610f7d57600080fd5b83018035915067ffffffffffffffff821115610f9857600080fd5b6020019150368190038213156103b157600080fd5b60008219821115610fc057610fc061100c565b500190565b600082821015610fd757610fd761100c565b500390565b60005b83811015610ff7578181015183820152602001610fdf565b83811115611006576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000807000a";

type UniswapV3ModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3ModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3Module__factory extends ContractFactory {
  constructor(...args: UniswapV3ModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _swapTarget: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV3Module> {
    return super.deploy(
      _swapTarget,
      _weth,
      overrides || {}
    ) as Promise<UniswapV3Module>;
  }
  override getDeployTransaction(
    _swapTarget: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_swapTarget, _weth, overrides || {});
  }
  override attach(address: string): UniswapV3Module {
    return super.attach(address) as UniswapV3Module;
  }
  override connect(signer: Signer): UniswapV3Module__factory {
    return super.connect(signer) as UniswapV3Module__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3ModuleInterface {
    return new utils.Interface(_abi) as UniswapV3ModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3Module {
    return new Contract(address, _abi, signerOrProvider) as UniswapV3Module;
  }
}
