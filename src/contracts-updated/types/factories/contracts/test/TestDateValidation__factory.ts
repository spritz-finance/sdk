/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  TestDateValidation,
  TestDateValidationInterface,
} from "../../../contracts/test/TestDateValidation";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTime",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "paymentAmount",
        type: "uint128",
      },
    ],
    name: "monthlyValidation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063da69825c14610030575b600080fd5b61004361003e366004610469565b610057565b604051901515815260200160405180910390f35b600061007683856fffffffffffffffffffffffffffffffff8516610080565b90505b9392505050565b60008061008c85610124565b9050600061009985610124565b905060006100a78284610196565b9050848110156100bd5760009350505050610079565b8151601d60ff8216106100f85760006100de8560400151866020015161020a565b9050836000015160ff168160ff1610156100f6578091505b505b835160ff808316911610158061011857506101148660016104f6565b8210155b98975050505050505050565b604080516080810182526000808252602082018190529181018290526060810182905290808061015f61015a6201518087610564565b6102a7565b6040805160808101825260ff928316815291909216602082015263ffffffff90921690820152606081019590955250929392505050565b60008160600151836060015111156101ad57600080fd5b826020015160ff168360400151600c6101c691906105ff565b836020015160ff168460400151600c6101df91906105ff565b6101e9919061050e565b6101f3919061066a565b6101fd919061066a565b63ffffffff169392505050565b60008160ff166001148061022157508160ff166003145b8061022f57508160ff166005145b8061023d57508160ff166007145b8061024b57508160ff166008145b8061025957508160ff16600a145b8061026757508160ff16600c145b156102745750601f6102a1565b8160ff166002146102875750601e6102a1565b6102908361041b565b61029b57601c61029e565b601d5b90505b92915050565b60008080838162253d8c6102be8362010bd96104b7565b6102c891906104b7565b9050600062023ab16102db836004610578565b6102e59190610536565b905060046102f68262023ab1610578565b6103019060036104b7565b61030b9190610536565b610315908361062b565b9150600062164b096103288460016104b7565b61033490610fa0610578565b61033e9190610536565b9050600461034e826105b5610578565b6103589190610536565b610362908461062b565b61036d90601f6104b7565b9250600061098f61037f856050610578565b6103899190610536565b90506000605061039b8361098f610578565b6103a59190610536565b6103af908661062b565b90506103bc600b83610536565b94506103c985600c610578565b6103d48360026104b7565b6103de919061062b565b915084836103ed60318761062b565b6103f8906064610578565b61040291906104b7565b61040c91906104b7565b9a919950975095505050505050565b600061042860048361068f565b63ffffffff1615801561044a575061044160648361068f565b63ffffffff1615155b806102a1575061045c6101908361068f565b63ffffffff161592915050565b60008060006060848603121561047e57600080fd5b833592506020840135915060408401356fffffffffffffffffffffffffffffffff811681146104ac57600080fd5b809150509250925092565b6000808212826001600160ff1b03038413811516156104d8576104d86106b2565b82600160ff1b0384128116156104f0576104f06106b2565b50500190565b60008219821115610509576105096106b2565b500190565b600063ffffffff80831681851680830382111561052d5761052d6106b2565b01949350505050565b600082610545576105456106c8565b600160ff1b82146000198414161561055f5761055f6106b2565b500590565b600082610573576105736106c8565b500490565b60006001600160ff1b036000841360008413858304851182821616156105a0576105a06106b2565b600160ff1b60008712868205881281841616156105bf576105bf6106b2565b600087129250878205871284841616156105db576105db6106b2565b878505871281841616156105f1576105f16106b2565b505050929093029392505050565b600063ffffffff80831681851681830481118215151615610622576106226106b2565b02949350505050565b600080831283600160ff1b01831281151615610649576106496106b2565b836001600160ff1b03018313811615610664576106646106b2565b50500390565b600063ffffffff83811690831681811015610687576106876106b2565b039392505050565b600063ffffffff808416806106a6576106a66106c8565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea164736f6c6343000807000a";

type TestDateValidationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDateValidationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDateValidation__factory extends ContractFactory {
  constructor(...args: TestDateValidationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestDateValidation> {
    return super.deploy(overrides || {}) as Promise<TestDateValidation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestDateValidation {
    return super.attach(address) as TestDateValidation;
  }
  override connect(signer: Signer): TestDateValidation__factory {
    return super.connect(signer) as TestDateValidation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDateValidationInterface {
    return new utils.Interface(_abi) as TestDateValidationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDateValidation {
    return new Contract(address, _abi, signerOrProvider) as TestDateValidation;
  }
}
