/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace SwapModule {
  export type ExactOutputParamsStruct = {
    to: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    inputTokenAmountMax: PromiseOrValue<BigNumberish>;
    paymentTokenAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    swapData: PromiseOrValue<BytesLike>;
  };

  export type ExactOutputParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    to: string;
    from: string;
    inputTokenAmountMax: BigNumber;
    paymentTokenAmount: BigNumber;
    deadline: BigNumber;
    swapData: string;
  };
}

export interface SwapModuleInterface extends utils.Interface {
  functions: {
    "decodeSwapData(bytes)": FunctionFragment;
    "exactOutputNativeSwap((address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "exactOutputSwap((address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decodeSwapData"
      | "exactOutputNativeSwap"
      | "exactOutputSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeSwapData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputNativeSwap",
    values: [SwapModule.ExactOutputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSwap",
    values: [SwapModule.ExactOutputParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeSwapData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputNativeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeSwapData(
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutputNativeSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutputSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  decodeSwapData(
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutputNativeSwap(
    swapParams: SwapModule.ExactOutputParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutputSwap(
    swapParams: SwapModule.ExactOutputParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decodeSwapData(
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    exactOutputNativeSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactOutputSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    decodeSwapData(
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutputNativeSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutputSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeSwapData(
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutputNativeSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutputSwap(
      swapParams: SwapModule.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
