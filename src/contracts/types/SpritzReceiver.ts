/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SpritzReceiverInterface extends utils.Interface {
  functions: {
    "payWithNativeSwap(uint256,uint256,uint256,bytes)": FunctionFragment;
    "payWithSwap(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "payWithToken(address,uint256)": FunctionFragment;
    "sweep(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "payWithNativeSwap"
      | "payWithSwap"
      | "payWithToken"
      | "sweep"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "payWithNativeSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payWithSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payWithToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "payWithNativeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;

  events: {
    "EtherReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EtherReceived"): EventFragment;
}

export interface EtherReceivedEventObject {
  sender: string;
  value: BigNumber;
}
export type EtherReceivedEvent = TypedEvent<
  [string, BigNumber],
  EtherReceivedEventObject
>;

export type EtherReceivedEventFilter = TypedEventFilter<EtherReceivedEvent>;

export interface SpritzReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpritzReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    payWithNativeSwap(
      amount: PromiseOrValue<BigNumberish>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payWithSwap(
      sourceTokenAddress: PromiseOrValue<string>,
      sourceTokenAmountMax: PromiseOrValue<BigNumberish>,
      paymentTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payWithToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  payWithNativeSwap(
    amount: PromiseOrValue<BigNumberish>,
    inputTokenAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payWithSwap(
    sourceTokenAddress: PromiseOrValue<string>,
    sourceTokenAmountMax: PromiseOrValue<BigNumberish>,
    paymentTokenAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payWithToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    payWithNativeSwap(
      amount: PromiseOrValue<BigNumberish>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    payWithSwap(
      sourceTokenAddress: PromiseOrValue<string>,
      sourceTokenAmountMax: PromiseOrValue<BigNumberish>,
      paymentTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    payWithToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EtherReceived(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): EtherReceivedEventFilter;
    EtherReceived(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): EtherReceivedEventFilter;
  };

  estimateGas: {
    payWithNativeSwap(
      amount: PromiseOrValue<BigNumberish>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payWithSwap(
      sourceTokenAddress: PromiseOrValue<string>,
      sourceTokenAmountMax: PromiseOrValue<BigNumberish>,
      paymentTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payWithToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    payWithNativeSwap(
      amount: PromiseOrValue<BigNumberish>,
      inputTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payWithSwap(
      sourceTokenAddress: PromiseOrValue<string>,
      sourceTokenAmountMax: PromiseOrValue<BigNumberish>,
      paymentTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payWithToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
